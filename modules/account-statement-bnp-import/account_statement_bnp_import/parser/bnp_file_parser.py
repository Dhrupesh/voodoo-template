# -*- coding: utf-8 -*-
###############################################################################
#
#   account_statement_bnp_import for OpenERP
#   Authors: Sebastien Beau <sebastien.beau@akretion.com>
#            Benoît Guillot <benoit.guillot@akretion.com>
#   Copyright 2013 Akretion
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU Affero General Public License as
#   published by the Free Software Foundation, either version 3 of the
#   License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Affero General Public License for more details.
#
#   You should have received a copy of the GNU Affero General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

import datetime
from account_statement_base_import.parser.file_parser import FileParser
from csv import Dialect
from _csv import QUOTE_MINIMAL, register_dialect


class bnp_dialect(Dialect):
    """Describe the usual properties of Excel-generated CSV files."""
    delimiter = ';'
    quotechar = '"'
    doublequote = False
    skipinitialspace = False
    lineterminator = '\r\n'
    quoting = QUOTE_MINIMAL


register_dialect("bnp_dialect", bnp_dialect)


def float_or_zero(val):
    """ Conversion function used to manage
    empty string into float usecase"""
    val = val.strip()
    return float(val.replace(',', '.')) if val else 0.0


def format_date(val):
    return datetime.datetime.strptime(val, "%d/%m/%Y")


class BNPFileParser(FileParser):
    """
    Parser for csv files generated by BNP bank.
    """

    def __init__(self, parse_name, ftype='csv'):
        conversion_dict = {
            u"Date d'opération": format_date,
            u"Libellé": unicode,
            u"DEBIT EUR": float_or_zero,
            u"CREDIT EUR": float_or_zero,
        }
        if ftype == 'cpt':
            ftype = 'csv' 
 
        super(BNPFileParser, self).__init__(parse_name, ftype=ftype,
                                            conversion_dict=conversion_dict,
                                            dialect=bnp_dialect)

    @classmethod
    def parser_for(cls, parser_name):
        return parser_name == 'bnp_csvparser'

    def _pre(self, *args, **kwargs):
        split_file = self.filebuffer.splitlines()
        solde_line = split_file[2]
        self.balance_start = float(solde_line.split(";")[1].split(' ')[0].replace(',', '.'))
        selected_lines = "\n".join(split_file[4:])
        self.filebuffer = selected_lines.decode('iso-8859-15').encode('utf-8')

    def _post(self, *args, **kwargs):
        super(BNPFileParser, self)._post(*args, **kwargs)
        self.balance_end = self.balance_start
        for line in self.result_row_list:
            self.balance_end += line[u'CREDIT EUR'] - line[u'DEBIT EUR']
        
    def get_st_line_vals(self, line, *args, **kwargs):
        """
        This method must return a dict of vals that can be passed to create
        method of statement line in order to record it. It is the responsibility
        of every parser to give this dict of vals, so each one can implement his
        own way of recording the lines.
            :param:  line: a dict of vals that represent a line of result_row_list
            :return: dict of values to give to the create method of statement line,
                     it MUST contain at least:
                {
                    'name':value,
                    'date':value,
                    'amount':value,
                    'ref':value,
                    'label':value,
                    'commission_amount':value,
                }
        In this generic parser, the commission is given for every line, so we store it
        for each one.
        """
        amount = -line[u"DEBIT EUR"] or line[u"CREDIT EUR"] or 0.0

        res = {
            'name': line.get(u"Libellé", '/'),
            'date': line.get(u"Date d'opération", datetime.datetime.now().date()),
            'amount': amount,
            'ref': '/',
            'label': line.get(u"Libellé", '/')
        }
        return res
